/*
 * Hovedskriptet for alfabet‚Äëspillet. Dette modulbaserte skriptet
 * h√•ndterer navigering mellom de ulike mini‚Äëspillene, genererer
 * dynamisk HTML‚Äëinnhold og reagerer p√• brukerens interaksjoner. Vi
 * importerer data og hjelpefunksjoner fra alphabet.js og bygger
 * spillene uten eksterne rammeverk.
 */

/*
 * Data og hjelpefunksjoner legges her i stedet for √• importere via ES
 * moduler. Dette gj√∏r at applikasjonen kan kj√∏res direkte fra
 * file:// uten CORS‚Äëproblemer. Funktionen brukes ogs√• av
 * testfilene via modulen alphabet.js, men her deklareres de p√• nytt
 * for nettleseren.
 */

// Bokstavlisten: hver bokstav har flere ord med tilh√∏rende emoji. Vi
// velger ord som passer for et barn som l√¶rer √• lese. Dette gir
// variasjon i spillene og forsterker forbindelsen mellom bokstav og
// ulike ord.
const letters = [
  {
    letter: 'A',
    words: [
      { word: 'Appelsin', emoji: 'üçä' },
      { word: 'Ape', emoji: 'üêµ' },
      { word: 'And', emoji: 'ü¶Ü' }
    ]
  },
  {
    letter: 'B',
    words: [
      { word: 'Bil', emoji: 'üöó' },
      { word: 'Ball', emoji: '‚öΩ' },
      { word: 'B√•t', emoji: 'üö§' }
    ]
  },
  {
    letter: 'C',
    words: [
      { word: 'Computer', emoji: 'üíª' },
      { word: 'Cactus', emoji: 'üåµ' },
      { word: 'Curry', emoji: 'üçõ' }
    ]
  },
  {
    letter: 'D',
    words: [
      { word: 'Drage', emoji: 'üêâ' },
      { word: 'D√∏r', emoji: 'üö™' },
      { word: 'Dukke', emoji: 'üß∏' }
    ]
  },
  {
    letter: 'E',
    words: [
      { word: 'Elefant', emoji: 'üêò' },
      { word: 'Eple', emoji: 'üçé' },
      { word: 'Ekorn', emoji: 'üêøÔ∏è' }
    ]
  },
  {
    letter: 'F',
    words: [
      { word: 'Frosk', emoji: 'üê∏' },
      { word: 'Fisk', emoji: 'üêü' },
      { word: 'Fugl', emoji: 'üê¶' }
    ]
  },
  {
    letter: 'G',
    words: [
      { word: 'Gitar', emoji: 'üé∏' },
      { word: 'Gull', emoji: 'ü™ô' },
      { word: 'G√•s', emoji: 'ü¶¢' }
    ]
  },
  {
    letter: 'H',
    words: [
      { word: 'Hus', emoji: 'üè†' },
      { word: 'Hatt', emoji: 'üé©' },
      { word: 'Hest', emoji: 'üê¥' }
    ]
  },
  {
    letter: 'I',
    words: [
      { word: 'Is', emoji: 'üç¶' },
      { word: 'Insekt', emoji: 'üêû' },
      { word: 'Isbj√∏rn', emoji: 'üêª‚Äç‚ùÑÔ∏è' }
    ]
  },
  {
    letter: 'J',
    words: [
      { word: 'Jordb√¶r', emoji: 'üçì' },
      { word: 'Juice', emoji: 'üßÉ' },
      { word: 'Juvel', emoji: 'üíé' }
    ]
  },
  {
    letter: 'K',
    words: [
      { word: 'Katt', emoji: 'üê±' },
      { word: 'Kake', emoji: 'üç∞' },
      { word: 'Kopp', emoji: '‚òï' }
    ]
  },
  {
    letter: 'L',
    words: [
      { word: 'L√∏ve', emoji: 'ü¶Å' },
      { word: 'Lam', emoji: 'üêë' },
      { word: 'Lego', emoji: 'üß±' }
    ]
  },
  {
    letter: 'M',
    words: [
      { word: 'M√•ne', emoji: 'üåô' },
      { word: 'Mus', emoji: 'üê≠' },
      { word: 'Melk', emoji: 'ü•õ' }
    ]
  },
  {
    letter: 'N',
    words: [
      { word: 'Nese', emoji: 'üëÉ' },
      { word: 'N√∏kkel', emoji: 'üîë' },
      { word: 'Nesehorn', emoji: 'ü¶è' }
    ]
  },
  {
    letter: 'O',
    words: [
      { word: 'Ost', emoji: 'üßÄ' },
      { word: 'Omelett', emoji: 'üç≥' },
      { word: 'Olje', emoji: 'üõ¢Ô∏è' }
    ]
  },
  {
    letter: 'P',
    words: [
      { word: 'Paraply', emoji: '‚òÇÔ∏è' },
      { word: 'Panda', emoji: 'üêº' },
      { word: 'Perle', emoji: 'üìø' }
    ]
  },
  {
    letter: 'Q',
    words: [
      { word: 'Quiz', emoji: '‚ùì' },
      { word: 'Quilt', emoji: 'ü™¢' },
      { word: 'Quesadilla', emoji: 'üåÆ' }
    ]
  },
  {
    letter: 'R',
    words: [
      { word: 'Rev', emoji: 'ü¶ä' },
      { word: 'Robot', emoji: 'ü§ñ' },
      { word: 'Ring', emoji: 'üíç' }
    ]
  },
  {
    letter: 'S',
    words: [
      { word: 'Sol', emoji: '‚òÄÔ∏è' },
      { word: 'Sko', emoji: 'üëü' },
      { word: 'Sau', emoji: 'üêë' }
    ]
  },
  {
    letter: 'T',
    words: [
      { word: 'Tiger', emoji: 'üêØ' },
      { word: 'Tog', emoji: 'üöÇ' },
      { word: 'Tre', emoji: 'üå≥' }
    ]
  },
  {
    letter: 'U',
    words: [
      { word: 'Ugle', emoji: 'ü¶â' },
      { word: 'Ur', emoji: '‚åö' },
      { word: 'Ufo', emoji: 'üõ∏' }
    ]
  },
  {
    letter: 'V',
    words: [
      { word: 'Vann', emoji: 'üíß' },
      { word: 'Veske', emoji: 'üëú' },
      { word: 'Vase', emoji: 'üè∫' }
    ]
  },
  {
    letter: 'W',
    words: [
      { word: 'Wok', emoji: 'üç≥' },
      { word: 'Web', emoji: 'üï∏Ô∏è' },
      { word: 'Wifi', emoji: 'üì∂' }
    ]
  },
  {
    letter: 'X',
    words: [
      { word: 'Xylofon', emoji: 'üéµ' }
    ]
  },
  {
    letter: 'Y',
    words: [
      { word: 'Yoghurt', emoji: 'ü•£' },
      { word: 'Yoyo', emoji: 'ü™Ä' },
      { word: 'Yacht', emoji: '‚õµ' }
    ]
  },
  {
    letter: 'Z',
    words: [
      { word: 'Zebra', emoji: 'ü¶ì' },
      { word: 'Zucchini', emoji: 'ü•í' }
    ]
  },
  {
    letter: '√Ü',
    words: [
      { word: '√Ür', emoji: 'ü¶Ü' }
    ]
  },
  {
    letter: '√ò',
    words: [
      { word: '√òrn', emoji: 'ü¶Ö' },
      { word: '√òre', emoji: 'üëÇ' },
      { word: '√òy', emoji: 'üèùÔ∏è' }
    ]
  },
  {
    letter: '√Ö',
    words: [
      { word: '√Öl', emoji: 'üêü' },
      { word: '√Ös', emoji: '‚õ∞Ô∏è' }
    ]
  }
];

/*
 * Lydfiler for riktig og galt svar. Vi oppretter to Audio‚Äëobjekter
 * som spilles av n√•r barnet velger et svar i spill med poeng. Lydene
 * lagres i assets‚Äëmappen som correct.wav og wrong.wav. For √• sikre
 * at lyden alltid spiller fra start, tilbakestiller vi currentTime
 * f√∏r avspilling.
 */
// Vi bruker en mer engasjerende applauslyd n√•r barnet svarer riktig.
// I stedet for det korte pipet erstattes correctAudio med en MP3‚Äëfil
// (applause‚Äë01.mp3) som ligger i assets‚Äëmappen. For galt svar
// genererer vi n√• en lyd med AudioContext som lager en kort
// ‚Äúwah‚Äëwah‚Äù‚Äëlignende effekt uten behov for en ekstern lydfil. Dette
// gj√∏r at spillet f√∏les mer levende og engasjerende p√• tvers av
// nettlesere.
const correctAudio = new Audio('assets/correct.mp3');
function playCorrectSound() {
  if (!correctAudio) return;
  correctAudio.currentTime = 0;
  correctAudio.play().catch(() => {});
}
function playWrongSound() {
  // Lag en kort lyd med oscillator for √• signalisere feil. Vi
  // bruker en enkel vibrato ved √• modulere frekvensen litt over
  // tiden, som gir en mer interessant lyd enn et vanlig pip.
  try {
    const ctx = new (window.AudioContext || window.webkitAudioContext)();
    const osc = ctx.createOscillator();
    const gain = ctx.createGain();
    osc.type = 'sawtooth';
    osc.frequency.setValueAtTime(220, ctx.currentTime);
    // Sweep frekvensen ned litt for en "sad trombone"‚Äëf√∏lelse
    osc.frequency.linearRampToValueAtTime(110, ctx.currentTime + 0.4);
    gain.gain.setValueAtTime(0.4, ctx.currentTime);
    gain.gain.exponentialRampToValueAtTime(0.001, ctx.currentTime + 0.4);
    osc.connect(gain);
    gain.connect(ctx.destination);
    osc.start();
    osc.stop(ctx.currentTime + 0.4);
    osc.onended = () => ctx.close();
  } catch (e) {
    // Fallback: hvis Web Audio API ikke st√∏ttes, spill av den gamle
    // wrong.wav (den ligger fortsatt i assets). Denne banen brukes
    // bare hvis AudioContext kaster feil, noe som er sjeldent i
    // moderne nettlesere.
    const fallback = new Audio('assets/wrong.wav');
    fallback.play().catch(() => {});
  }
}

/**
 * Viser en midlertidig tilbakemeldingsmelding til barnet. Meldingen
 * dukker opp √∏verst p√• siden og forsvinner etter kort tid. Dette
 * gir positive (eller korrigerende) tilbakemeldinger uten √•
 * avbryte spillets flyt.
 * @param {string} message Teksten som skal vises
 */
function showFeedbackMessage(message) {
  const msgDiv = document.createElement('div');
  msgDiv.className = 'feedback-message';
  msgDiv.textContent = message;
  document.body.appendChild(msgDiv);
  // Start fade‚Äëout etter 800 ms, fjern n√•r animasjonen er ferdig
  setTimeout(() => {
    msgDiv.classList.add('fade-out');
    msgDiv.addEventListener('transitionend', () => {
      msgDiv.remove();
    });
  }, 800);
}

/**
 * Viser en liten stjerne som flyr opp fra elementet, som en ekstra
 * visuell bel√∏nning n√•r barnet svarer riktig. Stjernen fjernes fra
 * DOM‚Äëen n√•r animasjonen er fullf√∏rt.
 * @param {HTMLElement} element Kortet eller containeren hvor stjernen skal vises
 */
function showStarAnimation(element) {
  const star = document.createElement('span');
  star.className = 'star-animation';
  star.textContent = '‚≠ê';
  element.appendChild(star);
  star.addEventListener('animationend', () => {
    star.remove();
  });
}

/**
 * Genererer en visuell poeng‚Äë/scorebar basert p√• en resultatliste.
 * Hver runde vises som en liten sirkel som er gr√• f√∏r den spilles,
 * gr√∏nn n√•r barnet svarer riktig og r√∏d n√•r barnet svarer feil.
 * Dette gir en intuitiv, barnevennlig fremstilling av fremdrift
 * og poeng uten √• m√•tte lese tekst. Vi returnerer HTML som kan
 * settes direkte inn i DOM.
 * @param {Array<boolean|null>} results Liste med true (riktig),
 * false (feil) eller null (ikke spilt enn√•) for hver runde
 */
function renderScoreBar(results) {
  return `<div class="score-bar">${results
    .map((r) => {
      let color = '#ccc';
      if (r === true) color = '#4caf50';
      else if (r === false) color = '#e57373';
      return `<div class="score-unit" style="background-color:${color}"></div>`;
    })
    .join('')}</div>`;
}

/**
 * Leser opp en instruksjon p√• norsk ved hjelp av talesyntese. Dette
 * brukes for √• gi barna verbale instruksjoner i starten av hvert
 * spill, slik at de ikke trenger √• lese teksten selv.
 * @param {string} text Instruksjonen som skal leses opp
 */
function speakInstruction(text) {
  if ('speechSynthesis' in window) {
    const utter = new SpeechSynthesisUtterance(text);
    utter.lang = 'nb-NO';
    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(utter);
  }
}

// Variabel som lagrer om bakgrunnsmusikken er sl√•tt p√• eller av. Dette
// tillater barnet eller forelderen √• skru av musikken. Vi viser en
// liten knapp i hovedmenyen for √• endre denne.
// Bakgrunnsmusikken er deaktivert som standard. Brukeren kan sl√• den
// p√• via knappen i hovedmenyen dersom √∏nskelig.
let musicEnabled = false;

/*
 * Vis et skjermbilde for √• velge hvor mange runder man vil spille i et
 * poengbasert spill. Dette gir barna (og foreldrene) mulighet til √•
 * tilpasse lengden p√• √∏kten etter oppmerksomhetsspennet. N√•r et valg
 * gj√∏res, kalles callback‚Äëfunksjonen med det valgte antallet. Vi bruker
 * store knapper som er enkle √• trykke p√•.
 * @param {function(number)} onChoose
 */
function chooseRounds(onChoose) {
  root.innerHTML = `
    ${createHomeOverlay()}
    <h2>Velg lengde p√• runden</h2>
    <p style="text-align:center;">Hvor mange runder vil du spille?</p>
    <div class="options-grid round-select">
      <div class="round-option" data-rounds="5">5 runder</div>
      <div class="round-option" data-rounds="10">10 runder</div>
    </div>
  `;
  const overlayBtn = document.getElementById('home-btn-overlay');
  if (overlayBtn) overlayBtn.onclick = renderHome;
  document.querySelectorAll('.round-option').forEach((opt) => {
    opt.addEventListener('click', () => {
      const num = parseInt(opt.getAttribute('data-rounds'));
      onChoose(num);
    });
  });
}

/*
 * Genererer en rad med stjerner basert p√• poengsummen. Barn liker
 * visuelle bel√∏nninger„Äê694885474704520‚Ä†L244-L253„Äë, s√• ved √• vise
 * gullstjerner for riktige svar og tomme stjerner for resterende,
 * gir vi en intuitiv tilbakemelding. Returnerer HTML‚Äëstreng.
 * @param {number} score Antall riktige svar
 * @param {number} total Totalt antall runder
 */
function getStarRow(score, total) {
  let stars = '';
  for (let i = 0; i < total; i++) {
    stars += i < score ? '‚≠ê' : '‚òÜ';
  }
  return `<div class="star-row">${stars}</div>`;
}

/*
 * Bakgrunnsmusikk for hovedmenyen. Vi benytter et lokalt lydklipp
 * (menu_music.wav) for √• gi en behagelig stemning. Musikken spilles
 * i l√∏kke n√•r menyen vises og stoppes n√•r barnet g√•r til et spill.
 */
let bgAudio = null;
function startMusic() {
  // Spill ikke bakgrunnsmusikk hvis den er deaktivert
  if (!musicEnabled) return;
  if (bgAudio) {
    // Spill videre hvis allerede initiert
    bgAudio.play().catch(() => {});
    return;
  }
  // Bruk MP3‚Äëfilen som bakgrunnsmusikk. MP3 st√∏ttes i moderne nettlesere og
  // gir en fin opplevelse. Dersom du √∏nsker annen format kan du legge til .ogg/.wav.
  bgAudio = new Audio('assets/menu_music.mp3');
  bgAudio.loop = true;
  bgAudio.volume = 0.4;
  bgAudio.play().catch(() => {});
}

function stopMusic() {
  if (!bgAudio) return;
  bgAudio.pause();
}

/**
 * Genererer HTML for en flytende hjemknapp som vises √∏verst til h√∏yre.
 * Denne brukes p√• spillskjermene for √• gj√∏re det enkelt √• g√•
 * tilbake til hovedmenyen. Knappen legges inn i hver spillside og
 * f√•r event‚Äëlistener i etterkant.
 * @returns {string} HTML for hjemknappen
 */
function createHomeOverlay() {
  return '<button class="overlay-home-btn" id="home-btn-overlay">üè†</button>';
}
/**
 * Fisher‚ÄìYates shuffling. Returnerer en ny array med elementene i
 * tilfeldig rekkef√∏lge.
 * @param {Array} array
 */
function shuffle(array) {
  const arr = array.slice();
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

/**
 * Genererer alternativer for matchingsspillet. Returnerer en blandet
 * liste med den korrekte bokstaven og et gitt antall distraktorer.
 * @param {object} currentLetter
 * @param {number} count
 */
function generateMatchingOptions(currentLetter, count) {
  const others = letters.filter((l) => l.letter !== currentLetter.letter);
  const distractorCount = Math.min(count - 1, others.length);
  const distractors = shuffle(others).slice(0, distractorCount);
  const options = [...distractors, currentLetter];
  return shuffle(options);
}

/**
 * Velger et tilfeldig ordobjekt for en bokstav. Hvis bokstaven har
 * flere ord, returneres ett av dem. Brukes i spillene for √• gi
 * variasjon. Returnerer objekt med egenskapene word og emoji.
 * @param {object} letterObj
 */
function getRandomWord(letterObj) {
  if (!letterObj || !letterObj.words || letterObj.words.length === 0) {
    return { word: '', emoji: '' };
  }
  const idx = Math.floor(Math.random() * letterObj.words.length);
  return letterObj.words[idx];
}

const root = document.getElementById('root');

/**
 * Rydder root‚Äëelementet og skriver startsiden. Startsiden viser
 * fire fliser som leder til hvert av mini‚Äëspillene.
 */
function renderHome() {
  // Start bakgrunnsmusikken n√•r hovedmenyen vises
  startMusic();
  root.innerHTML = `
    <img src="assets/leseleken_logo.png" alt="Leseleken-logo" class="header-img" />
    <div class="home-header">
      <!-- Fjern headingen "Leseleken" fra hovedmenyen siden logoen allerede viser navnet -->
      <button id="music-toggle" class="music-btn">${musicEnabled ? 'üîà' : 'üîá'}</button>
    </div>
    <p style="text-align:center; margin-bottom: 10px;">Velg et spill for √• √∏ve p√• bokstavene.</p>
    <div class="game-grid">
      <div class="tile" id="tile-pronunciation">
        <div class="tile-icon">üîä</div>
        <div>Bokstavkort</div>
      </div>
      <div class="tile" id="tile-matching">
        <div class="tile-icon">üß©</div>
        <div>Match ord</div>
      </div>
      <div class="tile" id="tile-memory">
        <div class="tile-icon">üß†</div>
        <div>Huske‚Äëspill</div>
      </div>
      <div class="tile" id="tile-writing">
        <div class="tile-icon">‚úçÔ∏è</div>
        <div>Skriv ordet</div>
      </div>
      <div class="tile" id="tile-picture">
        <div class="tile-icon">üñºÔ∏è</div>
        <div>Velg ord fra bilde</div>
      </div>
      <div class="tile" id="tile-reading">
        <div class="tile-icon">üìñ</div>
        <div>Les ord</div>
      </div>
    </div>
  `;
  document
    .getElementById('tile-pronunciation')
    .addEventListener('click', renderAlphabetCardsGame);
  document
    .getElementById('tile-matching')
    .addEventListener('click', renderMatchingGame);
  document
    .getElementById('tile-memory')
    .addEventListener('click', renderMemoryGame);
  // Skriv ordet spill erstatter sporingsspillet
  document
    .getElementById('tile-writing')
    .addEventListener('click', renderWritingGame);

  // Nytt spill ‚Äì bildegjettingsspill
  document
    .getElementById('tile-picture')
    .addEventListener('click', renderPictureGame);
  // Les ord spill
  document
    .getElementById('tile-reading')
    .addEventListener('click', renderReadingGame);

  // Musikk‚Äëtoggle
  const musicBtn = document.getElementById('music-toggle');
  musicBtn.addEventListener('click', () => {
    musicEnabled = !musicEnabled;
    musicBtn.textContent = musicEnabled ? 'üîà' : 'üîá';
    if (musicEnabled) {
      startMusic();
    } else {
      stopMusic();
    }
  });

  // Gi en kort verbal instruksjon for startsiden slik at barnet vet hva det skal gj√∏re
  speakInstruction('Velg et spill for √• √∏ve p√• bokstavene.');
}

/**
 * Spillet ¬´Bokstavlyder¬ª viser √©n bokstav av gangen sammen med et
 * eksempelord. Barnet kan spille av bokstavens lyd ved hjelp av
 * nettleserens tale¬≠syntese og g√• videre til neste bokstav. N√•r
 * listen er fullf√∏rt returneres man til startsiden.
 */
function renderPronunciationGame() {
  // Stopp bakgrunnsmusikken n√•r man forlater hovedmenyen
  stopMusic();
  let index = 0;
  const order = shuffle(letters);
  function show() {
    const letterObj = order[index];
    // Plukk ut et ordobjekt fra listen (bruk f√∏rste om ingen eller tilfeldig)
    const wordObj = letterObj.words && letterObj.words.length > 0 ? letterObj.words[0] : { word: '', emoji: '' };
    root.innerHTML = `
      ${createHomeOverlay()}
      <h2>Bokstavlyder</h2>
      <div class="emoji-display">${wordObj.emoji}</div>
      <div class="letter-display">${letterObj.letter}</div>
      <div class="word-display">${wordObj.word}</div>
      <div class="controls">
        <button class="button" id="play-sound">Spill lyd</button>
        <button class="button" id="next-btn">${
          index < order.length - 1 ? 'Neste' : 'Ferdig'
        }</button>
      </div>
    `;
    // Spill av lyd n√•r brukeren trykker p√• knappen. Vi bruker
    // Web¬†Speech API og setter spr√•k til norsk dersom tilgjengelig.
    document.getElementById('play-sound').onclick = () => {
      if ('speechSynthesis' in window) {
        const utterLetter = new SpeechSynthesisUtterance(letterObj.letter);
        const utterWord = new SpeechSynthesisUtterance(wordObj.word);
        utterLetter.lang = 'nb-NO';
        utterWord.lang = 'nb-NO';
        window.speechSynthesis.cancel();
        window.speechSynthesis.speak(utterLetter);
        setTimeout(() => {
          window.speechSynthesis.speak(utterWord);
        }, 500);
      } else {
        alert('Talesyntese er ikke st√∏ttet i denne nettleseren.');
      }
    };
    // Navigering
    const overlayBtn = document.getElementById('home-btn-overlay');
    if (overlayBtn) overlayBtn.onclick = renderHome;
    document.getElementById('next-btn').onclick = () => {
      if (index < order.length - 1) {
        index++;
        show();
      } else {
        // G√• tilbake til hovedmenyen n√•r alle bokstavene er bes√∏kt
        renderHome();
      }
    };
  }
  show();
}

/**
 * Spillet ¬´Match ord¬ª gir barnet en bokstav og tre ordalternativer.
 * Barnet skal velge ordet som begynner p√• den viste bokstaven. Etter
 * ti runder vises en oppsummering med antall riktige svar.
 */
function renderMatchingGame() {
  // Stopp bakgrunnsmusikken n√•r man forlater hovedmenyen
  stopMusic();
  // Barn og foreldre kan velge hvor mange runder de vil spille
  chooseRounds((numRounds) => {
    let round = 0;
    let score = 0;
    const totalRounds = numRounds;
    const order = shuffle(letters).slice(0, totalRounds);
    // Les instruksjonen h√∏yt √©n gang i starten
    speakInstruction('Hvilket ord starter p√• bokstaven du ser? Trykk p√• riktig bilde.');
    function showRound() {
      if (round >= totalRounds) {
        // Oppsummering med stjerner og morsom figur
        root.innerHTML = `
          ${createHomeOverlay()}
          <h2>Match ord ‚Äì resultat</h2>
          <div class="summary-figure">ü•≥</div>
          <p class="word-display">Du fikk ${score} av ${totalRounds} riktig!</p>
          ${getStarRow(score, totalRounds)}
          <p class="encouragement">Flott jobbet! Pr√∏v igjen for √• f√• enda flere poeng.</p>
          <div class="controls">
            <button class="button" id="play-again">üîÅ Spill igjen</button>
          </div>
        `;
        document.getElementById('play-again').onclick = renderMatchingGame;
        const overlayBtn = document.getElementById('home-btn-overlay');
        if (overlayBtn) overlayBtn.onclick = renderHome;
        return;
      }
      const letterObj = order[round];
      // Velg et ordobjekt for den riktige bokstaven
      const correctWord = getRandomWord(letterObj);
      const options = generateMatchingOptions(letterObj, 3);
      root.innerHTML = `
        ${createHomeOverlay()}
        <h2>Hvilket ord starter p√• bokstaven?</h2>
        <div class="letter-display">${letterObj.letter}</div>
        <div class="score-board">Runde ${round + 1} av ${totalRounds} ‚Äì Poeng: ${score}</div>
        <div class="options-grid">
          ${options
            .map((opt) => {
              const wordObj = opt.letter === letterObj.letter ? correctWord : getRandomWord(opt);
              return `<div class="option-card" data-letter="${opt.letter}">
                  <span class="option-emoji">${wordObj.emoji}</span>
                </div>`;
            })
            .join('')}
        </div>
      `;
      const overlayBtn = document.getElementById('home-btn-overlay');
      if (overlayBtn) overlayBtn.onclick = renderHome;
      // Les bokstaven h√∏yt n√•r man klikker p√• den
      document.querySelector('.letter-display').addEventListener('click', () => {
        if ('speechSynthesis' in window) {
          const utter = new SpeechSynthesisUtterance(letterObj.letter);
          utter.lang = 'nb-NO';
          window.speechSynthesis.cancel();
          window.speechSynthesis.speak(utter);
        }
      });
      document.querySelectorAll('.option-card').forEach((card) => {
        card.addEventListener('click', () => {
          const chosen = card.getAttribute('data-letter');
          // Vis visuell tilbakemelding og spill lyd
          if (chosen === letterObj.letter) {
            score++;
            card.style.backgroundColor = '#4caf50';
            card.innerHTML += '<span class="feedback-icon">‚úîÔ∏è</span>';
            playCorrectSound();
          } else {
            card.style.backgroundColor = '#e57373';
            card.innerHTML += '<span class="feedback-icon">‚ùå</span>';
            playWrongSound();
          }
          // deaktiver alle kort etter valg
          document.querySelectorAll('.option-card').forEach((c) => {
            c.style.pointerEvents = 'none';
          });
          setTimeout(() => {
            round++;
            showRound();
          }, 800);
        });
      });
    }
    showRound();
  });
}

/**
 * Huske‚Äëspill hvor barnet matcher store og sm√• bokstaver. Det
 * genereres √•tte unike bokstaver som danner seksten kort.
 */
function renderMemoryGame() {
  // Stopp bakgrunnsmusikken n√•r man forlater hovedmenyen
  stopMusic();
  // Velg √•tte bokstaver tilfeldig
  const selected = shuffle(letters).slice(0, 8);
  // Lag kort ‚Äì hver bokstav f√•r to identiske kort. Hvert kort f√•r ogs√• et
  // emoji‚Äëikon som representerer et ord som starter p√• bokstaven. Vi velger
  // et av ordene tilfeldig og bruker samme emoji for begge kortene i paret.
  let cards = [];
  selected.forEach((l) => {
    // Velg en av ordene for denne bokstaven for √• vise p√• kortet
    const randomWord = l.words[Math.floor(Math.random() * l.words.length)];
    const emoji = randomWord.emoji;
    // To kort per bokstav, begge deler samme bokstav og emoji
    cards.push({ display: l.letter, emoji: emoji, value: l.letter, matched: false, revealed: false });
    cards.push({ display: l.letter, emoji: emoji, value: l.letter, matched: false, revealed: false });
  });
  cards = shuffle(cards);
  let revealedIndices = [];
  let matchedCount = 0;

  // Les instruksjon h√∏yt slik at barnet forst√•r oppgaven
  speakInstruction('Finn par av like bokstaver ved √• klikke p√• kortene.');

  function drawBoard() {
    // Sjekk om alt er matched
    if (matchedCount === cards.length) {
      root.innerHTML = `
        ${createHomeOverlay()}
        <h2>Finn par av like bokstaver</h2>
        <p class="word-display">Gratulerer! Du fant alle parene.</p>
        <div class="controls">
          <button class="button" id="restart">üîÅ Spill igjen</button>
        </div>
      `;
      document.getElementById('restart').onclick = renderMemoryGame;
      const overlayBtn = document.getElementById('home-btn-overlay');
      if (overlayBtn) overlayBtn.onclick = renderHome;
      return;
    }
    // Tegn selve brettet
    root.innerHTML = `
      ${createHomeOverlay()}
      <h2>Finn par av like bokstaver</h2>
      <p style="text-align:center;">Trykk p√• to kort for √• finne et par.</p>
      <div class="card-grid">
        ${cards
          .map((card, idx) => {
            const classes = ['memory-card'];
            if (card.revealed || card.matched) classes.push('revealed');
            // N√•r kortet er avsl√∏rt eller matchet viser vi b√•de bokstaven og emojien
            const content = card.revealed || card.matched
              ? `<div class="card-content"><span class="letter">${card.display}</span><br><span class="emoji">${card.emoji}</span></div>`
              : '';
            return `<div class="${classes.join(' ')}" data-index="${idx}">${content}</div>`;
          })
          .join('')}
      </div>
    `;
    const overlayBtn = document.getElementById('home-btn-overlay');
    if (overlayBtn) overlayBtn.onclick = renderHome;
    document.querySelectorAll('.memory-card').forEach((div) => {
      div.addEventListener('click', () => {
        const idx = parseInt(div.getAttribute('data-index')); 
        const card = cards[idx];
        // Ignorer klikking p√• allerede matched eller allerede avsl√∏rt kort
        if (card.matched || card.revealed) return;
        // Vis kortet
        card.revealed = true;
        drawBoard();
        revealedIndices.push(idx);
        if (revealedIndices.length === 2) {
          const [i1, i2] = revealedIndices;
          const card1 = cards[i1];
          const card2 = cards[i2];
          if (card1.value === card2.value && i1 !== i2) {
            // match
            card1.matched = true;
            card2.matched = true;
            matchedCount += 2;
            revealedIndices = [];
            // kall drawBoard for √• vise oppdatert status
            setTimeout(drawBoard, 400);
          } else {
            // Ikke match: skjul igjen etter kort tid
            setTimeout(() => {
              card1.revealed = false;
              card2.revealed = false;
              revealedIndices = [];
              drawBoard();
            }, 800);
          }
        }
      });
    });
  }
  drawBoard();
}

/**
 * Spillet ¬´Spor bokstaven¬ª lar barnet tegne bokstaven p√• et lerret.
 * Den valgte bokstaven vises bakgrunn som en lys farge, og barnet
 * tegner med musepekeren eller fingeren over den. Barnet kan velge
 * hvilken bokstav som skal spores.
 */
function renderTracingGame() {
  // Stopp bakgrunnsmusikken n√•r man forlater hovedmenyen
  stopMusic();
  root.innerHTML = `
    ${createHomeOverlay()}
    <h2>Spor bokstaven</h2>
    <div class="controls">
      <label for="select-letter">Velg bokstav:</label>
      <select id="select-letter" class="select-letter">
        ${letters.map((l) => `<option value="${l.letter}">${l.letter}</option>`).join('')}
      </select>
    </div>
    <div class="canvas-container">
      <canvas id="traceCanvas" width="400" height="400"></canvas>
    </div>
    <div class="controls">
      <button class="button" id="clear-btn">T√∏m</button>
    </div>
  `;
  const canvas = document.getElementById('traceCanvas');
  const ctx = canvas.getContext('2d');
  // Gjeldende bokstav √• spore
  let currentLetter = letters[0].letter;
  // Tegn bokstaven i bakgrunnen
  function drawGuide() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.font = '240px Arial';
    ctx.fillStyle = 'rgba(189, 189, 189, 0.3)';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(currentLetter, canvas.width / 2, canvas.height / 2 + 40);
  }
  drawGuide();
  // Tegnefarge og strekbredde
  ctx.strokeStyle = '#ff7043';
  ctx.lineWidth = 8;
  let drawing = false;
  function startDraw(evt) {
    drawing = true;
    ctx.beginPath();
    const rect = canvas.getBoundingClientRect();
    ctx.moveTo(evt.clientX - rect.left, evt.clientY - rect.top);
  }
  function draw(evt) {
    if (!drawing) return;
    const rect = canvas.getBoundingClientRect();
    ctx.lineTo(evt.clientX - rect.left, evt.clientY - rect.top);
    ctx.stroke();
  }
  function endDraw() {
    drawing = false;
  }
  // Legg til event‚Äëlyttere
  canvas.addEventListener('pointerdown', startDraw);
  canvas.addEventListener('pointermove', draw);
  canvas.addEventListener('pointerup', endDraw);
  canvas.addEventListener('pointerleave', endDraw);
  // Endre bokstav
  document.getElementById('select-letter').onchange = (e) => {
    currentLetter = e.target.value;
    drawGuide();
  };
  document.getElementById('clear-btn').onclick = () => {
    drawGuide();
  };
  const overlayBtn = document.getElementById('home-btn-overlay');
  if (overlayBtn) overlayBtn.onclick = renderHome;

  // Les instruksjon h√∏yt slik at barnet forst√•r hvordan spillet fungerer
  speakInstruction('Velg en bokstav fra menyen og spor den med fingeren eller musepekeren.');
}

/**
 * Spillet ¬´Skriv ordet¬ª erstatter den gamle sporingsfunksjonen. Her
 * f√•r barnet se et bilde/emoji samt ordet skrevet med store
 * bokstaver p√• lerretet. Barnet kan tegne over bokstavene for √•
 * √∏ve h√•ndskrift. N√•r barnet er klar, kan de trykke ¬´Neste ord¬ª for
 * √• g√• videre. Spillet velger ord med maks 5 bokstaver for √• gj√∏re
 * skriveprosessen overkommelig for sm√• hender. Etter alle rundene
 * vises en oppsummering med stjerner. Vi bruker samme scorebar som
 * i de andre spillene for √• vise progresjonen, selv om alle svar
 * regnes som riktige.
 */
function renderWritingGame() {
  // Stopp bakgrunnsmusikk
  stopMusic();
  chooseRounds((numRounds) => {
    let round = 0;
    const totalRounds = numRounds;
    // Samle alle ord med lengde <= 5 bokstaver
    const shortWords = [];
    letters.forEach((l) => {
      l.words.forEach((w) => {
        // Fjern mellomrom og spesialtegn f√∏r vi teller bokstaver
        const sanitized = w.word.replace(/[^A-Za-z√Ö√Ü√ò√¶√∏√•]/g, '');
        if (sanitized.length <= 5) {
          shortWords.push({ word: w.word, emoji: w.emoji });
        }
      });
    });
    // Bland ordene og velg s√• mange vi trenger. Dersom det finnes
    // f√¶rre enn numRounds ord, tillat gjenbruk ved √• sykle gjennom
    // listen.
    const shuffled = shuffle(shortWords);
    const chosen = [];
    for (let i = 0; i < totalRounds; i++) {
      chosen.push(shuffled[i % shuffled.length]);
    }
    // Hold orden p√• progresjonen: true etter hvert ord skrives.
    const progress = Array(totalRounds).fill(null);
    function showRound() {
      if (round >= totalRounds) {
        // Ferdig: vis oppsummering
        root.innerHTML = `
          ${createHomeOverlay()}
          <div class="summary-figure">üéâ</div>
          <p class="word-display">Du skrev ${totalRounds} ord!</p>
          ${getStarRow(totalRounds, totalRounds)}
          <p class="encouragement">Flott jobbet! √òv gjerne mer for √• bli en skriveekspert.</p>
          <div class="controls">
            <button class="button" id="play-again-writing">üîÅ Spill igjen</button>
          </div>
        `;
        document.getElementById('play-again-writing').onclick = renderWritingGame;
        const overlayBtn = document.getElementById('home-btn-overlay');
        if (overlayBtn) overlayBtn.onclick = renderHome;
        return;
      }
      const item = chosen[round];
      // Generer scorebar HTML basert p√• progresjon
      const scoreBarHtml = progress
        .map((p) => {
          let color = '#ccc';
          if (p === true) color = '#4caf50';
          return `<div class="score-unit" style="background-color:${color}"></div>`;
        })
        .join('');
      root.innerHTML = `
        ${createHomeOverlay()}
        <h2>Skriv ordet</h2>
        <div class="picture-display">${item.emoji}</div>
        <p class="word-display">${item.word.toUpperCase()}</p>
        <div class="score-bar">${scoreBarHtml}</div>
        <div class="canvas-container">
          <canvas id="writeCanvas" width="500" height="200"></canvas>
        </div>
        <div class="controls">
          <button class="button" id="next-btn">Neste ord</button>
        </div>
      `;
      // Tegn ordet i bakgrunnen p√• canvas
      const canvas = document.getElementById('writeCanvas');
      const ctx = canvas.getContext('2d');
      function drawGuide() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.font = '120px Arial';
        ctx.fillStyle = 'rgba(189, 189, 189, 0.3)';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(item.word.toUpperCase(), canvas.width / 2, canvas.height / 2 + 30);
      }
      drawGuide();
      ctx.strokeStyle = '#ff7043';
      ctx.lineWidth = 8;
      let drawing = false;
      function startDraw(evt) {
        drawing = true;
        ctx.beginPath();
        const rect = canvas.getBoundingClientRect();
        ctx.moveTo(evt.clientX - rect.left, evt.clientY - rect.top);
      }
      function draw(evt) {
        if (!drawing) return;
        const rect = canvas.getBoundingClientRect();
        ctx.lineTo(evt.clientX - rect.left, evt.clientY - rect.top);
        ctx.stroke();
      }
      function endDraw() {
        drawing = false;
      }
      canvas.addEventListener('pointerdown', startDraw);
      canvas.addEventListener('pointermove', draw);
      canvas.addEventListener('pointerup', endDraw);
      canvas.addEventListener('pointerleave', endDraw);
      // Neste knapp
      document.getElementById('next-btn').onclick = () => {
        progress[round] = true;
        round++;
        // Spill en liten korrekt lyd for √• motivere
        playCorrectSound();
        showRound();
      };
      // Hjemknapp
      const overlayBtn = document.getElementById('home-btn-overlay');
      if (overlayBtn) overlayBtn.onclick = renderHome;
      // Instruksjon
      speakInstruction('Tegn over bokstavene for √• skrive ordet. N√•r du er ferdig, trykk p√• knappen for neste ord.');
    }
    showRound();
  });
}

/**
 * Nytt spill: Bokstavkort. Viser en grid med alle de 29 store
 * bokstavene og tilh√∏rende emoji. N√•r et kort trykkes, leses f√∏rst
 * bokstaven og deretter ordet h√∏yt via talesyntese. Barnet kan
 * returnere til hovedmenyen med en knapp.
 */
function renderAlphabetCardsGame() {
  // Stopp bakgrunnsmusikken n√•r man forlater hovedmenyen
  stopMusic();
  // Bygg alfabetkortene med en valgt emoji/ord som lagres i data-attributter.
  const cardsHtml = letters
    .map((l) => {
      const first = getRandomWord(l) || { word: '', emoji: '' };
      // Lag et kort med b√•de bokstav og tilh√∏rende ord i data-atributter
      return `<div class="alphabet-card" data-letter="${l.letter}" data-word="${first.word}">
          ${first.emoji}
          <div class="alphabet-letter">${l.letter}</div>
        </div>`;
    })
    .join('');
  // Render HTML inkludert hjemknappen √∏verst til h√∏yre
  root.innerHTML = `
    ${createHomeOverlay()}
    <h2>Velg en bokstav</h2>
    <p style="text-align:center;">Trykk p√• en bokstav for √• h√∏re bokstaven og et ord.</p>
    <div class="alphabet-grid">
      ${cardsHtml}
    </div>
  `;
  // Legg til talesyntese ved klikk. Bruk ordet lagret i data-atributtet slik at riktig ord leses.
  document.querySelectorAll('.alphabet-card').forEach((card) => {
    card.addEventListener('click', () => {
      const letter = card.getAttribute('data-letter');
      const word = card.getAttribute('data-word');
      if ('speechSynthesis' in window) {
        const utterLetter = new SpeechSynthesisUtterance(letter);
        const utterWord = new SpeechSynthesisUtterance(word);
        utterLetter.lang = 'nb-NO';
        utterWord.lang = 'nb-NO';
        window.speechSynthesis.cancel();
        window.speechSynthesis.speak(utterLetter);
        setTimeout(() => {
          window.speechSynthesis.speak(utterWord);
        }, 500);
      }
    });
  });
  // Hjemknappen i overlegg
  const overlayBtn = document.getElementById('home-btn-overlay');
  if (overlayBtn) overlayBtn.onclick = renderHome;
  // Les instruksjonen h√∏yt slik at barnet forst√•r oppgaven
  speakInstruction('Trykk p√• et kort for √• h√∏re bokstaven og ordet.');
}

/**
 * Bilde‚Äëtil‚Äëord spill: viser et bilde/emoji og tre ordalternativer.
 * Barnet skal velge ordet som beskriver bildet. Etter et gitt antall
 * runder vises poengsummen. Dette spillet bruker kun store bokstaver
 * fra listen, men ordalternativene vises som de st√•r i datasettet.
 */
function renderPictureGame() {
  // Stopp bakgrunnsmusikken n√•r man forlater hovedmenyen
  stopMusic();
  // La barnet velge antall runder (5 eller 10)
  chooseRounds((numRounds) => {
    let round = 0;
    let score = 0;
    const totalRounds = numRounds;
    const order = shuffle(letters).slice(0, totalRounds);
    // Lag en resultatliste for scorebaren. Den vil inneholde
    // null for ikke‚Äëspillte runder, true for riktige og false for feil.
    const results = Array(totalRounds).fill(null);
    // Les instruksjon h√∏yt
    speakInstruction('Se p√• bildet og trykk p√• ordet som passer.');
    function showRound() {
      if (round >= totalRounds) {
        // Oppsummering med stjerner og figur
        root.innerHTML = `
          ${createHomeOverlay()}
          <div class="summary-figure">üéâ</div>
          <p class="word-display">Du fikk ${score} av ${totalRounds} riktig!</p>
          ${getStarRow(score, totalRounds)}
          <p class="encouragement">Supert! √òv mer for √• bli en ordmester.</p>
          <div class="controls">
            <button class="button" id="play-again">üîÅ Spill igjen</button>
          </div>
        `;
        document.getElementById('play-again').onclick = renderPictureGame;
        const overlayBtn = document.getElementById('home-btn-overlay');
        if (overlayBtn) overlayBtn.onclick = renderHome;
        return;
      }
      const letterObj = order[round];
      const correctWord = getRandomWord(letterObj);
      const options = generateMatchingOptions(letterObj, 3);
      root.innerHTML = `
        ${createHomeOverlay()}
        <h2>Hvilket ord passer til bildet?</h2>
        <div class="picture-display">${correctWord.emoji}</div>
        ${renderScoreBar(results)}
        <div class="options-grid">
          ${options
            .map((opt) => {
              const w = opt.letter === letterObj.letter ? correctWord : getRandomWord(opt);
              return `<div class="option-card" data-letter="${opt.letter}">
                    <span>${w.word.toUpperCase()}</span>
                  </div>`;
            })
            .join('')}
        </div>
      `;
      const overlayBtn = document.getElementById('home-btn-overlay');
      if (overlayBtn) overlayBtn.onclick = renderHome;
      // Les ordet h√∏yt n√•r bildet klikkes
      document.querySelector('.picture-display').addEventListener('click', () => {
        if ('speechSynthesis' in window) {
          const utter = new SpeechSynthesisUtterance(correctWord.word);
          utter.lang = 'nb-NO';
          window.speechSynthesis.cancel();
          window.speechSynthesis.speak(utter);
        }
      });
      // Legg til klikk p√• alternativene
      document.querySelectorAll('.option-card').forEach((card) => {
        card.addEventListener('click', () => {
          const chosen = card.getAttribute('data-letter');
          if (chosen === letterObj.letter) {
            score++;
            card.style.backgroundColor = '#4caf50';
            card.innerHTML += '<span class="feedback-icon">‚úîÔ∏è</span>';
            playCorrectSound();
            showFeedbackMessage('Bra jobbet!');
            results[round] = true;
            // Stjerneanimasjon
            showStarAnimation(card);
          } else {
            card.style.backgroundColor = '#e57373';
            card.innerHTML += '<span class="feedback-icon">‚ùå</span>';
            playWrongSound();
            showFeedbackMessage('Pr√∏v igjen!');
            results[round] = false;
          }
          document.querySelectorAll('.option-card').forEach((c) => {
            c.style.pointerEvents = 'none';
          });
          setTimeout(() => {
            round++;
            showRound();
          }, 800);
        });
      });
    }
    showRound();
  });
}

/**
 * Nytt spill: Les ord. Barnet f√•r se et ord skrevet med store bokstaver
 * og tre emoji‚Äëalternativer. Barnet skal velge bildet som matcher ordet.
 * Etter ti runder vises en oppsummering med poengsum og en morsom
 * figur som oppmuntrer barnet til √• fortsette √• √∏ve. Vi bruker de
 * samme datastrukturene som for de andre spillene.
 */
function renderReadingGame() {
  // Stopp bakgrunnsmusikken n√•r man forlater hovedmenyen
  stopMusic();
  // La barnet velge antall runder
  chooseRounds((numRounds) => {
    let round = 0;
    let score = 0;
    const totalRounds = numRounds;
    const order = shuffle(letters).slice(0, totalRounds);
    // Resultatliste for scorebar: true, false eller null
    const results = Array(totalRounds).fill(null);
    // Les instruksjon h√∏yt
    speakInstruction('Les ordet og trykk p√• bildet som passer.');
    function showRound() {
      if (round >= totalRounds) {
        root.innerHTML = `
          ${createHomeOverlay()}
          <h2>Les ord ‚Äì resultat</h2>
          <div class="summary-figure">üéà</div>
          <p class="word-display">Du fikk ${score} av ${totalRounds} riktig!</p>
          ${getStarRow(score, totalRounds)}
          <p class="encouragement">Fantastisk! Fortsett √• lese og √∏v mer.</p>
          <div class="controls">
            <button class="button" id="play-again">üîÅ Spill igjen</button>
          </div>
        `;
        document.getElementById('play-again').onclick = renderReadingGame;
        const overlayBtn = document.getElementById('home-btn-overlay');
        if (overlayBtn) overlayBtn.onclick = renderHome;
        return;
      }
      const letterObj = order[round];
      const correctWord = getRandomWord(letterObj);
      const options = generateMatchingOptions(letterObj, 3);
      root.innerHTML = `
        ${createHomeOverlay()}
        <h2>Hvilket bilde passer til ordet?</h2>
        <div class="letter-display" style="font-size:4rem;">${correctWord.word.toUpperCase()}</div>
        ${renderScoreBar(results)}
        <div class="options-grid">
          ${options
            .map((opt) => {
              // For hvert alternativ: hvis det er bokstaven vi leter etter, bruk
              // correctWord, ellers velg et annet tilfeldig ord for den bokstaven.
              const w = opt.letter === letterObj.letter ? correctWord : getRandomWord(opt);
              return `<div class="option-card" data-letter="${opt.letter}" data-word="${w.word}">
                <span class="option-emoji">${w.emoji}</span>
              </div>`;
            })
            .join('')}
        </div>
      `;
      const overlayBtn = document.getElementById('home-btn-overlay');
      if (overlayBtn) overlayBtn.onclick = renderHome;
      // Fjern √• lese ordet ved klikking p√• ordet. I stedet kan barnet lese ordet selv.

      // Legg til lesing ved hover p√• bildene (emoji‚Äëene). N√•r musen holdes over et
      // alternativ uttales ordet som h√∏rer til alternativet. Dette gj√∏r
      // det enkelt √• h√∏re uttalen f√∏r man velger.
      document.querySelectorAll('.option-card').forEach((card) => {
        const wordForCard = card.getAttribute('data-word');
        card.addEventListener('mouseenter', () => {
          if ('speechSynthesis' in window && wordForCard) {
            const utter = new SpeechSynthesisUtterance(wordForCard);
            utter.lang = 'nb-NO';
            window.speechSynthesis.cancel();
            window.speechSynthesis.speak(utter);
          }
        });
      });
      document.querySelectorAll('.option-card').forEach((card) => {
        card.addEventListener('click', () => {
          const chosen = card.getAttribute('data-letter');
          if (chosen === letterObj.letter) {
            score++;
            card.style.backgroundColor = '#4caf50';
            card.innerHTML += '<span class="feedback-icon">‚úîÔ∏è</span>';
            playCorrectSound();
            showFeedbackMessage('Bra jobbet!');
            results[round] = true;
            // Stjerneanimasjon
            showStarAnimation(card);
          } else {
            card.style.backgroundColor = '#e57373';
            card.innerHTML += '<span class="feedback-icon">‚ùå</span>';
            playWrongSound();
            showFeedbackMessage('Pr√∏v igjen!');
            results[round] = false;
          }
          document.querySelectorAll('.option-card').forEach((c) => {
            c.style.pointerEvents = 'none';
          });
          setTimeout(() => {
            round++;
            showRound();
          }, 800);
        });
      });
    }
    showRound();
  });
}

// Start applikasjonen n√•r dokumentet er klar
document.addEventListener('DOMContentLoaded', () => {
  renderHome();
});

// Fallback: dersom DOMContentLoaded allerede har kj√∏rt f√∏r skriptet
// lastes, renderes startsiden umiddelbart. Dette er nyttig n√•r man
// laster via file:// hvor enkelte nettlesere kan h√•ndtere events
// annerledes.
if (document.readyState !== 'loading') {
  renderHome();
}
